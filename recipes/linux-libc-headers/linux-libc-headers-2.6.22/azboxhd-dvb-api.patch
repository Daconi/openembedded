diff -ruN linux-2.6.22.19.orig/include/linux/dvb/audio.h linux-2.6.22.19/include/linux/dvb/audio.h
--- linux-2.6.22.19.orig/include/linux/dvb/audio.h	2007-07-09 01:32:17.000000000 +0200
+++ linux-2.6.22.19/include/linux/dvb/audio.h	2011-01-12 00:56:44.000000000 +0100
@@ -124,17 +119,753 @@
 #define AUDIO_SET_KARAOKE          _IOW('o', 18, audio_karaoke_t)
 
 /**
- * AUDIO_GET_PTS
- *
- * Read the 33 bit presentation time stamp as defined
- * in ITU T-REC-H.222.0 / ISO/IEC 13818-1.
- *
- * The PTS should belong to the currently played
- * frame if possible, but may also be a value close to it
- * like the PTS of the last decoded frame or the last PTS
- * extracted by the PES parser.
- */
+* AUDIO_GET_PTS
+*
+* Read the 33 bit presentation time stamp as defined
+* in ITU T-REC-H.222.0 / ISO/IEC 13818-1.
+*
+* The PTS should belong to the currently played
+* frame if possible, but may also be a value close to it
+* like the PTS of the last decoded frame or the last PTS
+* extracted by the PES parser.
+*/
 #define AUDIO_GET_PTS              _IOR('o', 19, __u64)
 #define AUDIO_BILINGUAL_CHANNEL_SELECT _IO('o', 20)
 
+
+typedef long RMint32;
+typedef unsigned char RMuint8;
+typedef unsigned long RMuint32;
+typedef unsigned short RMuint16; 
+typedef unsigned long long RMuint64;
+
+typedef RMuint16 RMuint16x8[8];		/* array of  8 RMuint16 - used for AudioDecoder LpcmAobParameters */
+typedef RMuint16 RMuint16x6[6];		/* array of  6 RMuint16 - used for AudioDecoder LpcmVobParameters*/
+typedef RMint32  RMuint32x64[64];	/* array of 64 RMuint32 - used for AudioDecoder WMAParameters */
+typedef RMint32  RMint32x5[5];		/* array of  5 RMint32 - used for AudioDecoder WMAParameters */
+
+/** Boolean type */
+typedef unsigned char RMbool;
+#ifndef TRUE
+/** boolean true value.*/
+#define TRUE (RMbool)1
+/** boolean false value.*/
+#define FALSE (RMbool)0
+#endif // TRUE
+
+
+
+/** Specifiy individual codec output mode */
+#define AUDIO_CODEC_OUTPUTMODE_pcmToPP                0
+#define AUDIO_CODEC_OUTPUTMODE_pcmToI2S               1
+#define AUDIO_CODEC_OUTPUTMODE_cmprsdToSPDIF_pcmToPP  2
+#define AUDIO_CODEC_OUTPUTMODE_cmprsdToSPDIF_pcmToI2S 3
+#define AUDIO_CODEC_OUTPUTMODE_cmprsdToI2S            4
+#define AUDIO_CODEC_OUTPUTMODE_pcmMute                8
+
+
+/** Disable SPDIF or selects between uncompressed and compressed.@note @li Some formats such as MPEG and AAC can only play uncompressed. */
+enum OutputSpdif_type {
+/** SPDIF output is disabled. Stream is decoded - when decoder available - and sent to I2S. */
+OutputSpdif_Disable = 0,
+/** SPDIF output is compressed whenever possible (AC3, DTS...). MPEG or AAC will not be sent compressed over SPDIF. Stream is decoded - when decoder available - and sent to I2S. */
+OutputSpdif_Compressed = (1 | (AUDIO_CODEC_OUTPUTMODE_cmprsdToSPDIF_pcmToPP <<4)),
+/** SPDIF output consists in 2 channels PCM. Stream is decoded - when decoder available - and sent to I2S. @note @li Use codec dependent settings for additional options such as surround */
+OutputSpdif_Uncompressed = (3 | (AUDIO_CODEC_OUTPUTMODE_pcmToPP << 4)),
+/** SPDIF output is compressed whenever possible (AC3, DTS...), audio not decoded at all (I2S is blank). */
+OutputSpdif_NoDecodeCompressed = (5 | ((AUDIO_CODEC_OUTPUTMODE_pcmMute | AUDIO_CODEC_OUTPUTMODE_cmprsdToSPDIF_pcmToPP) << 4))
+};
+
+
+enum AudioOutputChannels_type {			        //format: Rear/Surround/Front
+Audio_Out_Ch_C = 0x01,            //   00 0001      (0/0/1)
+Audio_Out_Ch_LR = 0x02,           //   00 0010      (0/0/2)
+Audio_Out_Ch_LCR = 0x03,          //   00 0011      (0/0/3)
+Audio_Out_Ch_LRS = 0x12,          //   01 0010      (0/1/2)
+Audio_Out_Ch_LCRS = 0x13,         //   01 0011      (0/1/3)
+Audio_Out_Ch_LRLsRs = 0x22,       //   10 0010      (0/2/2)
+Audio_Out_Ch_LCRLsRs = 0x23,      //   10 0011      (0/2/3)
+Audio_Out_Ch_LCRLsRsSs = 0x63,    // 1 10 0011      (1/2/3)
+Audio_Out_Ch_LRLsRsLssRss = 0xA2, //10 10 0010      (2/2/2) 
+Audio_Out_Ch_LCRLsRsLssRss = 0xA3 //10 10 0011      (2/2/3)
+};
+
+/** Select the audio codec (Currently supported codecs: PCM, MPEG1 L1/2/3 or AC3).@note @li The audio codec can be selected only in stop mode or before the init command. */
+enum AudioDecoder_Codec_type {
+/** Selects audio AC3 codecs */
+AudioDecoder_Codec_AC3 = 1,
+/** Selects the audio MPEG1 codec. It supports layer 1, 2 and 3 (Also known as mp3) and MPEG2 backward compatible audio layers (Only support for 2 channels). */
+AudioDecoder_Codec_MPEG1 = 2,
+/** Selects the AAC codec. It supports several types of payload formats (see ::RMAudioDecoderPropertyID_AACParameters) */
+AudioDecoder_Codec_AAC = 3,
+/** Select the DVD Audio code. Not supported yet */
+AudioDecoder_Codec_DVDA = 4,
+/** Select the PCM codecs. It supports several types of PCM formats (see ::RMAudioDecoderPropertyID_PcmParameters) */
+AudioDecoder_Codec_PCM = 5,
+/** Supported */
+AudioDecoder_Codec_DTS = 6,
+/** Supported */
+AudioDecoder_Codec_WMA = 7,
+/** Supported */
+AudioDecoder_Codec_WMAPRO = 8,
+/** EVD ExAC supported */
+AudioDecoder_Codec_EXAC = 9,
+/** Supported. */
+AudioDecoder_Codec_ATX = 10,
+/** Compressed WMAPRO over SPDIF. */
+AudioDecoder_Codec_WMAPRO_SPDIF = 11,
+/** Select the PCMX codecs. */
+AudioDecoder_Codec_PCMX = 12,
+/** MPEG-4 BSAC decoder. */
+AudioDecoder_Codec_BSAC = 13,
+/** Test tone generator. */
+AudioDecoder_Codec_TTONE = 14,
+/** DTSHD LBR */
+AudioDecoder_Codec_DTSLBR = 15,
+/**  Group of codecs for speech. G711: input=64Kbps compressed, output=linear PCM, 8KHz. Other codecs to come: G.723, G.729A, GSM.AMR */
+AudioDecoder_Codec_Speech = 0x12,
+};
+
+enum PcmCdaChannelAssign_type {
+// according to C.1-1 table
+// 1st digit after PcmCda represents nchannels
+PcmCda1_C = 0,        // 0x00
+
+PcmCda2_LR,           // 0x01
+PcmCda3_LfRfS,        // 0x02
+PcmCda4_LfRfLsRs,     // 0x03
+PcmCda3_LfRfLfe,      // 0x04
+PcmCda4_LfRfLfeS,     // 0x05
+PcmCda5_LfRfLfeLsRs,  // 0x06
+PcmCda3_LfRfC,        // 0x07
+PcmCda4_LfRfCS,       // 0x08
+PcmCda5_LfRfCLsRs,    // 0x09
+PcmCda4_LfRfCLfe,     // 0x0a
+PcmCda5_LfRfCLfeS,    // 0x0b
+PcmCda6_LfRfCLfeLsRs, // 0x0c
+
+PcmCda5_LfRfLsRsLfe = 0x12,// 0x12
+PcmCda5_LfRfLsRsC,    // 0x13
+PcmCda6_LfRfLsRsCLfe, // 0x14
+PcmCda8_LfRfCLfeLsRsLssRss, //0x15
+};
+
+/* Fl = front left, Fr = front right, Fc = front center,
+Bl = back left,  Br = back right,  Bc = back center,
+Flc = front left of center, Frc = front right of center,
+Sl = side left, Sr = side right
+Lf = low frequency or subwoofer
+*/
+enum WmaproOutputChannels_type {
+Wmapro_1 = 0x10,	/* Wmapro_Fc */
+
+Wmapro_2 = 0x20,	/* Wmapro_FlFr */
+
+Wmapro_3 = 0x30,	/* Wmapro_FlFrFc */
+
+Wmapro_4 = 0x40,	/* Wmapro_FlFrFcBc */
+Wmapro_41 = 0x41,	/* Wmapro_FlFrBlBr */
+
+Wmapro_5 = 0x50,	/* Wmapro_FlFrFcSlSr */
+Wmapro_51 = 0x51,	/* Wmapro_FlFrFcBlBr */
+
+Wmapro_6 = 0x60,	/* Wmapro_FlFrFcLfSlSr */
+Wmapro_61 = 0x61,	/* Wmapro_FlFrFcLfBlBr */
+Wmapro_62 = 0x62,	/* Wmapro_FlFrFcBcSlSr */
+Wmapro_63 = 0x63,	/* Wmapro_FlFrFcBcBlBr */
+
+Wmapro_7 = 0x70,	/* Wmapro_FlFrFcLfBcSlSr */
+Wmapro_71 = 0x71,	/* Wmapro_FlFrFcLfBlBrBc */
+Wmapro_72 = 0x72,	/* Wmapro_FlFrFcBlBrSlSr */
+Wmapro_73 = 0x73,	/* Wmapro_FlFrFcBlBrFlcFrc */
+
+Wmapro_8 = 0x80,	/* Wmapro_FlFrFcLfBlBrSlSr */
+Wmapro_81 = 0x81	/* Wmapro_FlFrFcLfBlBrFlcFrc */
+};
+enum WmaproDynamicRangeControl_type {
+Drc_high,
+Drc_med,
+Drc_low,
+};
+
+enum AACInputFormat {
+ADIF_header = 0,
+ADTS_header = 1,
+DSI_header = 2
+};
+
+enum OutputDualMode_type {
+DualMode_Stereo = 0,
+DualMode_LeftMono,
+DualMode_RightMono,
+DualMode_MixMono
+};
+
+enum TestToneType {
+Ttone_WhiteNoise = 0,
+Ttone_other
+};
+
+enum AudioChannelMask_type {
+Audio_Mask_Disable_All = 0,
+Audio_Mask_L = (1<<0),
+Audio_Mask_C = (1<<2),
+Audio_Mask_R = (1<<1),
+Audio_Mask_Ls = (1<<4),
+Audio_Mask_Rs = (1<<5),
+Audio_Mask_Lfe = (1<<3),
+Audio_Mask_Lb = (1<<6),
+Audio_Mask_Rb = (1<<7)
+};
+
+enum AacOutputChannels_type {
+Aac_C = 0x01,
+Aac_LR = 0x02,
+Aac_LCR = 0x03,
+Aac_LRS = 0x12,
+Aac_LCRS = 0x13,
+Aac_LRLsRs = 0x22,
+Aac_LCRLsRs = 0x23
+};
+
+
+enum Ac3OutputChannels_type {
+Ac3_C = 0x01,
+Ac3_LR = 0x02,
+Ac3_LCR = 0x03,
+Ac3_LRS = 0x12,
+Ac3_LCRS = 0x13,
+Ac3_LRLsRs = 0x22,
+Ac3_LCRLsRs = 0x23
+};
+
+enum AudioOutputSurround20_type {
+SurroundAsStream = 0,	/* surround enabled or disabled as in stream */
+SurroundEnable = 5,
+SurroundDisable = 4
+};
+
+
+enum Ac3CompMode_type {
+CompMode_analog,
+CompMode_digital,
+CompMode_line_out,
+CompMode_RF,
+CompMode_RF_iptv
+};
+
+
+enum DtsOutputChannels_type {
+Dts_C = 0x01,
+Dts_LR = 0x02,
+Dts_LCR = 0x03,
+Dts_LRS = 0x12,
+Dts_LCRS = 0x13,
+Dts_LRLsRs = 0x22,
+Dts_LCRLsRs = 0x23
+};
+
+enum LpcmVobChannelAssign_type {
+// according to C.1-2 table
+// number of chanels and channel assign are specified
+LpcmVob1_C = 0,        // 0x00
+
+LpcmVob2_LR,           // 0x01
+
+LpcmVob3_LfRfS,        // 0x02
+LpcmVob4_LfRfLsRs,     // 0x03
+LpcmVob3_LfRfLfe,      // 0x04
+LpcmVob4_LfRfLfeS,     // 0x05
+LpcmVob5_LfRfLfeLsRs,  // 0x06
+LpcmVob3_LfRfC,        // 0x07
+LpcmVob4_LfRfCS,       // 0x08
+LpcmVob5_LfRfCLsRs,    // 0x09
+LpcmVob4_LfRfCLfe,     // 0x0a
+LpcmVob5_LfRfCLfeS,    // 0x0b
+LpcmVob6_LfRfCLfeLsRs, // 0x0c
+
+LpcmVob5_LRLfRfS,      // 0x0d
+LpcmVob6_LRLfRfLsRs,   // 0x0e
+LpcmVob5_LRLfRfLfe,    // 0x0f
+LpcmVob6_LRLfRfLfeS,   // 0x10
+LpcmVob7_LRLfRfLfeLsRs,// 0x11
+
+LpcmVob5_LRLfRfC,      // 0x12
+LpcmVob6_LRLfRfCS,     // 0x13
+LpcmVob7_LRLfRfCLsRs,  // 0x14
+LpcmVob6_LRLfRfCLfe,   // 0x15
+LpcmVob7_LRLfRfCLfeS,  // 0x16
+LpcmVob8_LRLfRfCLfeLsRs,// 0x17
+LpcmVobVR_DualMono,    //0x18
+};
+
+
+enum LpcmAobChannelAssign_type {
+// according to C.1-1 table
+// 1st digit after LpcmAob represents nchannels GR1, 2nd digit = nchannels GR2
+LpcmAob10_C = 0,        // 0x00
+
+LpcmAob20_LR,           // 0x01
+LpcmAob21_LfRfS,        // 0x02
+LpcmAob22_LfRfLsRs,     // 0x03
+LpcmAob21_LfRfLfe,      // 0x04
+LpcmAob22_LfRfLfeS,     // 0x05
+LpcmAob23_LfRfLfeLsRs,  // 0x06
+LpcmAob21_LfRfC,        // 0x07
+LpcmAob22_LfRfCS,       // 0x08
+LpcmAob23_LfRfCLsRs,    // 0x09
+LpcmAob22_LfRfCLfe,     // 0x0a
+LpcmAob23_LfRfCLfeS,    // 0x0b
+LpcmAob24_LfRfCLfeLsRs, // 0x0c
+
+LpcmAob31_LfRfCS,       // 0x0d
+LpcmAob32_LfRfCLsRs,    // 0x0e
+LpcmAob31_LfRfCLfe,     // 0x0f
+LpcmAob32_LfRfCLfeS,    // 0x10
+LpcmAob33_LfRfCLfeLsRs, // 0x11
+
+LpcmAob41_LfRfLsRsLfe,  // 0x12
+LpcmAob41_LfRfLsRsC,    // 0x13
+LpcmAob42_LfRfLsRsCLfe, // 0x14
+};
+
+
+
+
+
+/* used in RMAudioDecoderPropertyID_SpeechParameters, RMAudioEncoderPropertyID_SpeechParameters */
+enum EMhwlibSpeechSubCodec {
+EMhwlibSpeechSubCodec_G711,
+EMhwlibSpeechSubCodec_AMR,
+};
+
+enum EMhwlibG711CodingMode {
+EMhwlibG711CodingMode_A_law, // A-law (European standard)
+EMhwlibG711CodingMode_u_law, // u-law (US standard)
+};
+
+enum EMhwlibAmrCodingBitRate {
+EMhwlibAMRCodingRate475,  // 4.75kbps
+EMhwlibAMRCodingRate515,  // 5.15kbps
+EMhwlibAMRCodingRate590,  // 5.90kbps
+EMhwlibAMRCodingRate670,  // 6.70kbps
+EMhwlibAMRCodingRate740,  // 7.40kbps
+EMhwlibAMRCodingRate795,  // 7.95kbps
+EMhwlibAMRCodingRate1020, // 10.2kbps
+EMhwlibAMRCodingRate1220, // 12.2kbps
+};
+
+struct AudioDecoder_SpeechParameters_type {
+enum EMhwlibSpeechSubCodec subcodec;
+enum AudioOutputChannels_type OutputChannels;
+RMbool AEC; /* generate audio echo cancelation info */
+union {
+struct {
+enum EMhwlibG711CodingMode mode;
+} g711;
+struct {
+enum EMhwlibAmrCodingBitRate bitrate;
+} amr;
+} params;
+};
+
+
+/** struct Default */
+struct AudioDecoder_PCMXParameters_type {
+/** Member default */
+enum PcmCdaChannelAssign_type ChannelAssign;
+/** Member default range 8 -> 24 */
+RMuint32 BitsPerSample;
+/** Member default */
+RMuint32 SamplingFrequency;
+/** Member default */
+RMbool MsbFirst;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+RMbool SignedPCM;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_AACParameters_type {
+/** Member default */
+enum AACInputFormat InputFormat;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AacOutputChannels_type OutputChannels;
+/** Member default */
+RMbool Acmod2DualMode;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_DVDAParameters_type {
+/** Member default */
+RMuint32 Chconfig;
+/** Member default */
+RMuint32 DRCenable;
+/** Member default */
+RMuint32 DRCboost;
+/** Member default */
+RMuint32 DRCcut;
+/** Member default */
+RMint32 DRCdialref;
+/** Member default */
+RMbool Lossless;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_TToneParameters_type {
+/** Member default */
+enum TestToneType TToneType;
+/** Member default */
+enum AudioChannelMask_type TToneChannelMask;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AacOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_BSACParameters_type {
+/** Member default */
+enum AACInputFormat InputFormat;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AacOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_ExACParameters_type {
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AacOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_Ac3Parameters_type {
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum Ac3OutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMbool Acmod2DualMode;
+/** Member default */
+enum Ac3CompMode_type CompMode;
+/** Member default */
+RMuint32 DynScaleHi;
+/** Member default */
+RMuint32 DynScaleLo;
+/** Member default */
+RMuint32 PcmScale;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_DtsParameters_type {
+/** supported in Postprocessing */
+enum OutputDualMode_type OutputDualMode;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum DtsOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+/** Member default */
+RMbool dts_CD;
+};
+
+/** struct Default */
+struct AudioDecoder_LpcmVobParameters_type {
+/** Member default */
+enum LpcmVobChannelAssign_type ChannelAssign;
+/** Member default range 8 -> 24 */
+RMuint32 BitsPerSample;
+/** Member default */
+RMuint32 SamplingFrequency;
+/** Member default */
+RMbool DownMix;
+/** Member default */
+RMuint16x8 CoefLR;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_LpcmAobParameters_type {
+/** Member default */
+enum LpcmAobChannelAssign_type ChannelAssign;
+/** Member default range 8 -> 24 */
+RMuint32 BitsPerSampleGroup1;
+/** Member default range 0 -> 24 */
+RMuint32 BitsPerSampleGroup2;
+/** Member default */
+RMuint32 SamplingFrequencyGroup1;
+/** Member default */
+RMuint32 SamplingFrequencyGroup2;
+/** Member default */
+RMbool DownMix;
+/** Member default */
+RMuint16x6 CoefLR;
+/** Member default */
+RMuint32 PhaseLR;
+/** Member default */
+RMuint32 Group2Shift;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMbool DownSample;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_PcmCdaParameters_type {
+/** Member default */
+enum PcmCdaChannelAssign_type ChannelAssign;
+/** Member default range 8 -> 24 */
+RMuint32 BitsPerSample;
+/** Member default */
+RMuint32 SamplingFrequency;
+/** Member default */
+RMbool MsbFirst;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMbool SignedPCM;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_LpcmBDParameters_type {
+/** Member default */
+enum PcmCdaChannelAssign_type ChannelAssign;
+/** Member default range 8 -> 24 */
+RMuint32 BitsPerSample;
+/** Member default */
+RMuint32 SamplingFrequency;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_MpegParameters_type {
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Member default */
+RMbool Acmod2DualMode;
+/** Member default */
+enum AudioOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_WMAParameters_type {
+/** Member default */
+RMuint16 VersionNumber;
+/** Member default */
+RMuint32 SamplingFrequency;
+/** Member default */
+RMuint8 NumberOfChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+RMuint32 Bitrate;
+/** Member default */
+RMuint32 PacketSize;
+/** Member default */
+RMuint16 EncoderOptions;
+/** Member default */
+RMuint8 BitsPerSample;
+/** Member default */
+RMuint8 WMAProValidBitsPerSample;
+/** Member default */
+RMuint16 WMAProChannelMask;
+/** Member default */
+RMuint8 WMAProVersionNumber;
+/** Member default */
+enum OutputDualMode_type OutputDualMode;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** For Wmapro_6 6 channels play on 6 outputs, else 6 channels are downmixed in 2 outputs */
+enum WmaproOutputChannels_type OutputChannels;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** not yet implemented */
+RMbool ValidDownMixCoef;
+/** not yet implemented */
+RMuint32x64 DownMixCoef;
+/** not yet implemented */
+enum WmaproDynamicRangeControl_type DynamicRangeControl;
+/** not yet implemented */
+RMint32x5 DrcCoef;
+/** Member default */
+RMuint32 BassMode;
+};
+
+/** struct Default */
+struct AudioDecoder_DtslbrParameters_type {
+/** supported in Postprocessing */
+enum OutputDualMode_type OutputDualMode;
+/** Selects between disable, uncompressed and compressed SpdifOutput. */
+enum OutputSpdif_type OutputSpdif;
+/** Member default */
+enum DtsOutputChannels_type OutputChannels;
+/** Member default */
+RMbool OutputLfe;
+/** Member default */
+enum AudioOutputSurround20_type OutputSurround20;
+/** Member default */
+RMuint32 BassMode;
+};
+
+typedef struct audio_eof_status {
+    int     ended;
+} audio_eof_status_t;                             
+
+typedef struct audio_data {
+    enum AudioDecoder_Codec_type Codec;
+    RMuint32 SubCodec;
+    RMuint32 SampleRate;
+    RMuint32 SamplingFrequency;	/* input frequency of the audio stream. Used only for pcm files */
+    RMuint32 OutputChannels;
+    enum OutputSpdif_type Spdif;
+    enum OutputSpdif_type HDMISpdif;
+    struct AudioDecoder_AACParameters_type AACParams;
+    struct AudioDecoder_ExACParameters_type EXACParams;
+    struct AudioDecoder_DVDAParameters_type DVDAParams;
+    struct AudioDecoder_BSACParameters_type BSACParams;
+    struct AudioDecoder_Ac3Parameters_type Ac3Params;
+    struct AudioDecoder_DtsParameters_type DtsParams;
+    struct AudioDecoder_MpegParameters_type MpegParams;
+    struct AudioDecoder_LpcmVobParameters_type LpcmVobParams;
+    struct AudioDecoder_LpcmAobParameters_type LpcmAobParams;
+    struct AudioDecoder_LpcmBDParameters_type LpcmBDParams;
+    struct AudioDecoder_PcmCdaParameters_type PcmCdaParams;
+    struct AudioDecoder_PCMXParameters_type PCMXParams;
+    struct AudioDecoder_WMAParameters_type	WmaParams;
+    struct AudioDecoder_TToneParameters_type TToneParams; 
+    struct AudioDecoder_DtslbrParameters_type LbrParams; 
+    struct AudioDecoder_SpeechParameters_type SpeechParams; 
+} audio_data_t;
+
+#define AUDIO_GET_EOF_STATUS           _IOR('o', 30, audio_eof_status_t)
+#define AUDIO_SET_CODEC       _IOW('o', 31, audio_data_t)
+#define AUDIO_SET_STC       _IO('o', 32)
+#define AUDIO_VIDEO_GET_EOF_STATUS     _IOR('o', 33, video_eof_status_t)
+#define AUDIO_PLAY_STC       _IO('o', 34)
+#define AUDIO_STOP_STC       _IO('o', 35)
+#define AUDIO_SET_STC_TIME			   _IOW('o', 36 , RMuint64)
+#define	AUDIO_GET_STC_TIME			   _IOR('o', 37 , RMuint64)
+#define AUDIO_SET_AUDIO_TIME                      _IOW('o', 37 , RMuint64)
+
 #endif /* _DVBAUDIO_H_ */
diff -ruN linux-2.6.22.19.orig/include/linux/dvb/video.h linux-2.6.22.19/include/linux/dvb/video.h
--- linux-2.6.22.19.orig/include/linux/dvb/video.h	2007-07-09 01:32:17.000000000 +0200
+++ linux-2.6.22.19/include/linux/dvb/video.h	2010-12-12 21:53:10.000000000 +0100
@@ -275,4 +269,70 @@
 #define VIDEO_COMMAND     	   _IOWR('o', 59, struct video_command)
 #define VIDEO_TRY_COMMAND 	   _IOWR('o', 60, struct video_command)
 
+
+typedef long RMint32;
+typedef unsigned char RMuint8;
+typedef unsigned long RMuint32;
+typedef unsigned short RMuint16; 
+
+typedef RMuint16 RMuint16x8[8];		/* array of  8 RMuint16 - used for AudioDecoder LpcmAobParameters */
+typedef RMuint16 RMuint16x6[6];		/* array of  6 RMuint16 - used for AudioDecoder LpcmVobParameters*/
+typedef RMint32  RMuint32x64[64];	/* array of 64 RMuint32 - used for AudioDecoder WMAParameters */
+typedef RMint32  RMint32x5[5];		/* array of  5 RMint32 - used for AudioDecoder WMAParameters */
+
+/** Boolean type */
+typedef unsigned char RMbool;
+#ifndef TRUE
+/** boolean true value.*/
+#define TRUE (RMbool)1
+/** boolean false value.*/
+#define FALSE (RMbool)0
+#endif // TRUE
+
+
+
+enum EMhwlibVideoCodec {
+EMhwlibVideoCodec_MPEG2 = 1,
+EMhwlibVideoCodec_MPEG4,
+EMhwlibVideoCodec_MPEG4_Padding,
+EMhwlibVideoCodec_DIVX3,
+EMhwlibVideoCodec_VC1,
+EMhwlibVideoCodec_WMV,
+EMhwlibVideoCodec_H264,
+EMhwlibJPEGCodec,
+EMhwlibDVDSpuCodec,
+EMhwlibBDRLECodec,
+EMhwlibVideoCodec_AVS,
+EMhwlibVideoCodec_H261,
+};
+	    
+	    typedef struct video_data {
+	    enum EMhwlibVideoCodec Codec;
+	    } video_data_t;
+	    
+	    typedef struct video_eof_status {
+	     int     ended;
+	     } video_eof_status_t;
+
+
+/** struct Default */
+struct VideoDecoder_DIVX3VSProp_type {
+    /** Member default */
+	RMuint16 Image_Width;
+	    /** Member default */
+		RMuint16 Image_Height;
+		};
+
+
+#define VIDEO_SET_CODEC     _IOW('o', 80, video_data_t)
+#define VIDEO_GET_EOF_STATUS   _IOR('o', 81, video_eof_status_t)
+#define VIDEO_DIVX_DSI     _IOW('o', 82, struct VideoDecoder_DIVX3VSProp_type)
+#define VIDEO_SET_STC     _IO('o', 83)
+#define VIDEO_STOP_STC     _IO('o', 84)
+#define VIDEO_PLAY_STC     _IO('o', 85)
+#define VIDEO_PAUSE_ALL     _IO('o', 86)
+#define VIDEO_RESUME_ALL    _IO('o', 87)
+#define VIDEO_RESYNC     _IO('o', 88) // -> NOT USED!!!
+#define VIDEO_SET_STC_TIME	   _IOW('o', 89 , unsigned long long)
+#define VIDEO_FRAME_PACKED		_IOW('o', 90 , unsigned long long)
 #endif /*_DVBVIDEO_H_*/
